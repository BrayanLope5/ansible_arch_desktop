- name: Get api response to find url to latest release of clipse.
  ansible.builtin.uri:
      url: https://api.github.com/repos/savedra1/clipse/releases/latest
      return_content: true
  register: json_response

- name: Check if directory with the same name already exists.
  loop: "{{json_response.json.assets}}"
  when: item.name is search("linux_amd64.tar.gz")
  stat:
    path: "{{nonroot_home}}/Applications/bin/clipse/{{item.name}}" 
  register: result

- name: Check if loping was skipped. If false, then the folder exists and no need to delete clipse folder and download latest.
  ansible.builtin.set_fact:
    latest_dir_present: "{{ result | json_query('@.skipped') }}"
    # linux_latest_release_names: "{{ json_response.json.assets | json_query('@[*].name') }}"
    # linux_latest_release_names: "{{ json_response.json.assets | json_query('@[*].name' | contains('linux_amd64.tar.gz') == `true` }}"
    linux_latest_release_info: "{{ json_response.json.assets | json_query(\"[?contains(name, 'linux_amd64.tar.gz')]\") }}"

- name: If folder was skipped, true, then remove clipse folder.
  when: not latest_dir_present | bool
  ansible.builtin.file:
    path: "{{nonroot_home}}/Applications/bin/clipse"
    state: absent

- name: Create directory for clipse version if parent clipse directory was removed.
  when: not latest_dir_present | bool
  ansible.builtin.file:
    path: "{{nonroot_home}}/Applications/bin/clipse/{{linux_latest_release_info[0].name}}"
    state: directory
  
- name: Installing clipse
  when: not latest_dir_present | bool
  unarchive:
    remote_src: yes
    src: "{{linux_latest_release_info[0].browser_download_url}}"
    dest: "{{nonroot_home}}/Applications/bin/clipse/{{linux_latest_release_info[0].name}}"
    keep_newer: yes
